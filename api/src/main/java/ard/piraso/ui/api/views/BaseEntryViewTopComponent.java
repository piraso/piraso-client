/*
 * Copyright 2012 adeleon.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ard.piraso.ui.api.views;

import ard.piraso.api.entry.Entry;
import ard.piraso.ui.api.EntryTabView;
import ard.piraso.ui.api.extension.AbstractEntryViewTopComponent;
import ard.piraso.ui.api.manager.EntryTabViewProviderManager;
import ard.piraso.ui.api.manager.FontProviderManager;
import ard.piraso.ui.api.util.ClipboardUtils;
import ard.piraso.ui.api.util.NotificationUtils;
import org.apache.commons.collections.CollectionUtils;
import org.openide.ErrorManager;

import java.util.ArrayList;
import java.util.List;

import static ard.piraso.ui.api.util.JTextPaneUtils.insertCode;
import static ard.piraso.ui.api.util.JTextPaneUtils.start;


/**
 * Top component which displays something.
 */
public abstract class BaseEntryViewTopComponent<T extends Entry> extends AbstractEntryViewTopComponent<T> {

    private String shortName;
    
    protected BaseEntryViewTopComponent(Class<T> typeClass, String shortName) {
        super(typeClass);
        
        this.shortName = shortName;
        initComponents();
    }
    
    @Override
    protected void refreshView() {
        List<EntryTabView> components = new ArrayList<EntryTabView>();

        int selectedIndex = jTabbedPane.getSelectedIndex();

        jTabbedPane.removeAll();

        if(currentEntry != null) {
            components.add(new EntryTabView(jPanel1, shortName));
            components.addAll(EntryTabViewProviderManager.INSTANCE.getTabView(BaseEntryViewTopComponent.class, currentEntry));
        }

        refreshRequestView();

        if(CollectionUtils.isNotEmpty(components)) {
            for(EntryTabView tabView : components) {
                jTabbedPane.addTab(tabView.getTitle(), tabView.getComponent());
            }
        }

        if(selectedIndex >= 0 && selectedIndex < jTabbedPane.getTabCount()) {
            jTabbedPane.setSelectedIndex(selectedIndex);
        }

        repaint();
        revalidate();
    }
    
    
    protected abstract void populateMessage(T entry) throws Exception;
    
    protected void refreshRequestView() {
        try {
            txtMessage.setFont(FontProviderManager.INSTANCE.getEditorDefaultFont());
            txtMessage.setText("");
            btnCopy.setEnabled(currentEntry != null);

            if(currentEntry != null) {
                populateMessage(currentEntry);
                insertCode(txtMessage, "\n\n\n");
            }

            start(txtMessage);
        } catch (Exception e) {
            ErrorManager.getDefault().notify(e);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextPane();
        jToolBar1 = new javax.swing.JToolBar();
        btnCopy = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();

        jPanel1.setLayout(new java.awt.BorderLayout());

        txtMessage.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 6, 6, 6));
        txtMessage.setEditable(false);
        txtMessage.setFont(FontProviderManager.INSTANCE.getEditorDefaultFont());
        jScrollPane1.setViewportView(txtMessage);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setBackground(new java.awt.Color(226, 226, 226));
        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(1);
        jToolBar1.setRollover(true);

        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ard/piraso/ui/api/icons/copy.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnCopy, org.openide.util.NbBundle.getMessage(BaseEntryViewTopComponent.class, "BaseEntryViewTopComponent.btnCopy.text")); // NOI18N
        btnCopy.setToolTipText(org.openide.util.NbBundle.getMessage(BaseEntryViewTopComponent.class, "BaseEntryViewTopComponent.btnCopy.toolTipText")); // NOI18N
        btnCopy.setBorder(javax.swing.BorderFactory.createEmptyBorder(7, 7, 7, 7));
        btnCopy.setEnabled(false);
        btnCopy.setFocusable(false);
        btnCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCopy);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.WEST);

        setLayout(new java.awt.BorderLayout());
        add(jTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        if (currentEntry != null) {
            ClipboardUtils.copy(txtMessage.getText());
            NotificationUtils.info(String.format("%s is now copied to clipboard.", getName()));
        }
    }//GEN-LAST:event_btnCopyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton btnCopy;
    protected javax.swing.JPanel jPanel1;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTabbedPane jTabbedPane;
    protected javax.swing.JToolBar jToolBar1;
    protected javax.swing.JTextPane txtMessage;
    // End of variables declaration//GEN-END:variables

}
