/*
 * Copyright 2012 adeleon.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ard.piraso.ui.base;

import ard.piraso.ui.api.NewContextMonitorModel;
import ard.piraso.ui.io.impl.HttpEntrySource;
import org.openide.windows.WindowManager;

import javax.swing.*;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author adeleon
 */
public class ConnectingDialog extends javax.swing.JDialog {
    
    private static final Logger LOG = Logger.getLogger(ConnectingDialog.class.getName());
    
    private Map<NewContextMonitorModel, String> failures;
    
    private List<HttpEntrySource> validResults;

    /**
     * Creates new form ConnectingDialog
     */
    public ConnectingDialog() {
        super(WindowManager.getDefault().getMainWindow(), false);
        initComponents();

        setLocationRelativeTo(getOwner());
    }
    
    public void startTests(final List<NewContextMonitorModel> models) {
        failures = new HashMap<NewContextMonitorModel, String>();
        validResults = new ArrayList<HttpEntrySource>();

        setVisible(true);

        try {
            startTestingConnectivity(models);
        } catch (Exception e) {
            LOG.log(Level.WARNING, e.getMessage(), e);
        }
    }

    private void startTestingConnectivity(final List<NewContextMonitorModel> models) throws ExecutionException, InterruptedException, InvocationTargetException {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                for (NewContextMonitorModel m : models) {
                    HttpEntrySource source = new HttpEntrySource(m.getPreferences(), m.getLoggingUrl(), m.getWatchedAddr());
                    source.setName(m.getName());

                    try {
                        source.reset();
                        if (source.testConnection()) {
                            validResults.add(source);
                        } else {
                            failures.put(m, "Connection Failure.");
                        }
                    } catch (Exception e) {
                        failures.put(m, e.getMessage());
                    }
                }

                dispose();

                ContextMonitorDispatcher.handleResults(validResults, failures);
            }
        });
    }

    public List<HttpEntrySource> getValidResults() {
        return validResults;
    }

    public Map<NewContextMonitorModel, String> getFailures() {
        return failures;
    }

    public void setLabel(String text) {
        lblStatus.setText(text);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setAlwaysOnTop(true);
        setResizable(false);

        lblStatus.setForeground(new java.awt.Color(0, 102, 0));
        lblStatus.setText(org.openide.util.NbBundle.getMessage(ConnectingDialog.class, "ConnectingDialog.lblStatus.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(lblStatus)
                .addContainerGap(216, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(lblStatus)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables
}
